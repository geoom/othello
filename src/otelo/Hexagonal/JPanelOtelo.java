/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * JPanelOtelo.java
 *
 * Created on 20/04/2012, 12:09:23 PM
 */

package otelo.Hexagonal;

import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Polygon;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;
import javax.swing.ImageIcon;

/**
 *
 * @author cliente
 */
public class JPanelOtelo extends javax.swing.JPanel{

    /** Creates new form JPanelOtelo */
    public JPanelOtelo(OthelloHexagonal otheHex) {
        initComponents();
        this.otheHex = otheHex;
        eventoMouse();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(204, 255, 204));
        setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // <editor-fold defaultstate="collapsed" desc="Eventos de Mouse">
    private void eventoMouse(){
        addMouseListener(new MouseListener() {
            public void mouseClicked(MouseEvent arg0) {
                System.out.println("Clicked");
            }

            public void mousePressed(MouseEvent arg0) {
                System.out.println("Pressed");
            }

            public void mouseReleased(MouseEvent arg0) {
                System.out.println("Released");
                System.out.print("seleccionado "+otheHex.getTurno());
                int obtenerX = (int) arg0.getPoint().getX();
                int obtenerY = (int) arg0.getPoint().getY();
                int matrizOthello[][] = otheHex.getMatTab();
                if(otheHex.getTurno() == OthelloHexagonal.FICHA_BLANCA){
                    if(otheHex.getTipoJug1() == Jugador.MAQUINA){
                        System.out.println("Movimiento de maq1 ");
                        otheHex.movimientoMaquina();
                        repaint();
                        return;
                    }else{
                        for(int i=0;i<matrizOthello.length;i++){
                            for(int j=0;j<matrizOthello[0].length;j++){
                                if(otheHex.getTamTab()-2<=i+j && i+j<=3*otheHex.getTamTab()-4){
                                    int xCentro = obtenerX-(int)(RAD_HEX*(j+i)*3/2);
                                    int yCentro = obtenerY-(obtenerCentroY()+(int)(RAD_HEX*(j-i)*Math.sin(30)));
                                    double puntoXY = Math.pow(xCentro, 2)+Math.pow(yCentro, 2);
                                    if(puntoXY<=Math.pow(RAD_HEX*Math.sin(Math.PI/3),2)){
                                        System.out.println("posicion "+i+"-"+j);
                                        otheHex.colocarFichaBlanca(i, j);
                                        repaint();
                                        return;
                                    }
                                }
                            }
                        }
                    }
                }
                if(otheHex.getTurno() == OthelloHexagonal.FICHA_NEGRA){
                    if(otheHex.getTipoJug2() == Jugador.MAQUINA){
                        System.out.println("Movimiento de maq2 ");
                        otheHex.movimientoMaquina();
                        repaint();
                        return;
                    }else{
                        for(int i=0;i<matrizOthello.length;i++){
                            for(int j=0;j<matrizOthello[0].length;j++){
                                if(otheHex.getTamTab()-2<=i+j && i+j<=3*otheHex.getTamTab()-4){
                                    int xCentro = obtenerX-(int)(RAD_HEX*(j+i)*3/2);
                                    int yCentro = obtenerY-(obtenerCentroY()+(int)(RAD_HEX*(j-i)*Math.sin(30)));
                                    double puntoXY = Math.pow(xCentro, 2)+Math.pow(yCentro, 2);
                                    if(puntoXY<=Math.pow(RAD_HEX*Math.sin(Math.PI/3),2)){
                                        System.out.println("posicion "+i+"-"+j);
                                        otheHex.colocarFichaNegra(i, j);
                                        repaint();
                                        return;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            public void mouseEntered(MouseEvent arg0) {
                System.out.println("Entered"+otheHex.getTurno());
            }

            public void mouseExited(MouseEvent arg0) {
                System.out.println("Exited"+otheHex.getTurno());
            }
        });
        addMouseMotionListener(new MouseMotionListener() {

            public void mouseDragged(MouseEvent arg0) {
                System.out.println("Dragged");
            }

            public void mouseMoved(MouseEvent arg0) {
                /*Captura movimiento mouse*/
            }
        });
    };// </editor-fold>

    @Override
    public void paint(Graphics g){
        super.paint(g);
        Graphics2D g2 = (Graphics2D)g;
        dibujarTablero(g2);
        g = g2;
    }

    // <editor-fold defaultstate="collapsed" desc="Metodos de dibujo">
    private void dibujarTablero(Graphics2D g2){
        int matrizOthello[][] = otheHex.getMatTab();
        g2.setColor(Color.red);
        g2.drawString("Turno :", 10, 25);
        if(otheHex.getTurno() == OthelloHexagonal.FICHA_BLANCA){
            if(otheHex.getTipoJug1()==Jugador.MAQUINA){
                g2.drawString("PRESIONE BOTON DERECHO PARA RESLIZAR JUGADA MAQUINA (FICHA BLANCA)", 10, getSize().height-8);
                Image mou = new ImageIcon(getClass().getResource("/img/mousetub.jpg")).getImage();
                g2.drawImage(mou, getSize().width-mou.getWidth(this), 0, this);
                g2.drawString("Click aqui",getSize().width-mou.getWidth(this)-10, mou.getHeight(this)+5);
            }
            g2.setPaint(new GradientPaint(70-RAD_HEX, 25-RAD_HEX, Color.white, 70+RAD_HEX, 25+RAD_HEX, Color.darkGray));
        }else{
            if(otheHex.getTipoJug2()==Jugador.MAQUINA){
                g2.drawString("PRESIONE BOTON DERECHO PARA RESLIZAR JUGADA MAQUINA (FICHA NEGRA)", 10, getSize().height-8);
                Image mou = new ImageIcon(getClass().getResource("/img/mousetun.jpg")).getImage();
                g2.drawImage(mou, getSize().width-mou.getWidth(this), 0, this);
                g2.drawString("Click aqui",getSize().width-mou.getWidth(this)-10, mou.getHeight(this)+5);
            }
            g2.setPaint(new GradientPaint(70-RAD_HEX, 25-RAD_HEX, Color.black, 70+RAD_HEX, 25+RAD_HEX, Color.darkGray));
        }
        g2.fillPolygon(dibujarHexagonoPosicion(70, 25));
        g2.setColor(Color.red);
        g2.drawPolygon(dibujarHexagonoPosicion(70, 25));
        ArrayList xs = otheHex.buscarJugPos(otheHex.getTurno(), matrizOthello).get(0);
        ArrayList ys = otheHex.buscarJugPos(otheHex.getTurno(), matrizOthello).get(1);
        for(int i=0;i<matrizOthello.length;i++){
            for(int j=0;j<matrizOthello[0].length;j++){
                Polygon nodoHexag;
                if(otheHex.getTamTab()-2<=i+j && i+j<=3*otheHex.getTamTab()-4){
                    nodoHexag = ubicarHexagono(i, j);
                    switch(matrizOthello[i][j]){
                        case 0:
                            g2.setPaint(new GradientPaint(ubicI(i, j)-RAD_HEX, ubicJ(i, j)-RAD_HEX, Color.green, ubicI(i, j)+RAD_HEX, ubicJ(i, j)+RAD_HEX, Color.yellow));
                            ;break;
                        case -1:
                            g2.setPaint(new GradientPaint(ubicI(i, j)-RAD_HEX, ubicJ(i, j)-RAD_HEX, Color.black, ubicI(i, j)+RAD_HEX, ubicJ(i, j)+RAD_HEX, Color.darkGray));
                            ;break;
                        case 1:
                            g2.setPaint(new GradientPaint(ubicI(i, j)-RAD_HEX, ubicJ(i, j)-RAD_HEX, Color.white, ubicI(i, j)+RAD_HEX, ubicJ(i, j)+RAD_HEX, Color.darkGray));
                            ;break;
                        case -2:
                            g2.setPaint(new GradientPaint(ubicI(i, j)-RAD_HEX, ubicJ(i, j)-RAD_HEX, Color.lightGray, ubicI(i, j)+RAD_HEX, ubicJ(i, j)+RAD_HEX, Color.darkGray));
                            ;break;
                        case 2:
                            g2.setPaint(new GradientPaint(ubicI(i, j)-RAD_HEX, ubicJ(i, j)-RAD_HEX, Color.yellow, ubicI(i, j)+RAD_HEX, ubicJ(i, j)+RAD_HEX, Color.darkGray));
                            ;break;
                    }
                    g2.fillPolygon(nodoHexag);
                    g2.setColor(Color.black);
                    if (jugPos(i, j, xs, ys)){
                        Image mou = new ImageIcon(getClass().getResource("/icons/accept.png")).getImage();
                        g2.drawImage(mou, ubicI(i, j)-8, ubicJ(i, j)-8, this);
                    }
                    //g2.drawString(""+i+"-"+j, ubicI(i, j),ubicJ(i, j));
                }
            }
        }
    }

    private boolean jugPos(int x, int y, ArrayList<Integer> xs, ArrayList<Integer> ys){
        if (xs == null)
            return false;
        if (xs.isEmpty())
            return false;
        for (int i = 0; i < xs.size(); i++)
            if((x == xs.get(i)) && (y == ys.get(i)))
                return true;
        return false;
    }
    //funcion de ubicacion del hexagono i,j
    private Polygon ubicarHexagono(int posi,int posj){
        return dibujarHexagonoPosicion(ubicI(posi, posj), ubicJ(posi, posj));
    }

    private int ubicI (int i, int j){
        return (int)(RAD_HEX*(j+i)*3/2);
    }

    private int ubicJ (int i, int j){
        return obtenerCentroY()+(int)(RAD_HEX*(j-i)*Math.sin(30));
    }

    private Polygon dibujarHexagonoPosicion(int x, int y){
        int xHex[] = new int[6];
        int yHex[] = new int[6];
        for (int i = 0; i < yHex.length; i++) {
            xHex[i] = x+(int)(RAD_HEX*Math.cos(2*Math.PI*i/6));
            yHex[i] = y+(int)(RAD_HEX*Math.sin(2*Math.PI*i/6));
        }
        return new Polygon(xHex, yHex, xHex.length);
    }// </editor-fold>

    private int obtenerCentroX(){
        return (int)(getSize().width/2);
    }

    private int obtenerCentroY(){
        return (int)(getSize().height/2);
    }

    private static int RAD_HEX = 20;
    private OthelloHexagonal otheHex;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
